#!/usr/bin/env python3

# SYNOPSIS
# --------
# A script to build OVIS (specified source directory (on host) by --src) in the
# ovis-centos-build container environment and install it in container's
# /opt/ovis (which is a rw bind to host directory given in `--prefix` option).

import os
import re
import pwd
import sys
import json
import time
import argparse
import TADA
import logging

from subprocess import run, STDOUT, PIPE
from distutils.spawn import find_executable
from LDMS_Test import LDMSDCluster, LDMSDContainer, process_args, \
                      add_common_args, jprint, parse_ldms_ls

if __name__ != "__main__":
    raise RuntimeError("This should not be impoarted as a module.")

class Debug(object):
    pass
D = Debug()

logging.basicConfig(format = "%(asctime)s %(name)s %(levelname)s %(message)s",
                    level = logging.INFO)

log = logging.getLogger(__name__)

exec(open(os.getenv("PYTHONSTARTUP", "/dev/null")).read())

#### default values #### ---------------------------------------------
sbin_ldmsd = find_executable("ldmsd")
if sbin_ldmsd:
    default_prefix, a, b = sbin_ldmsd.rsplit('/', 2)
else:
    default_prefix = "/opt/ovis"

#### argument parsing #### -------------------------------------------
ap = argparse.ArgumentParser(description = "Build OVIS for ldms-test" )
add_common_args(ap)
ap.add_argument("--sos-src", type=str,
                help = "SOS source directory.")
args = ap.parse_args()
process_args(args)

#### config variables #### ------------------------------
USER = args.user
PREFIX = args.prefix
SRC = args.src
SOS_SRC = args.sos_src
DB = args.data_root

if not SRC:
    log.error("--src is required")
    sys.exit(-1)
if not SOS_SRC:
    log.error("--sos-src is required")
    sys.exit(-1)

ret = run("git log --oneline HEAD~1..HEAD", cwd=SRC, shell=True, stdout=PIPE, stderr=STDOUT)
if ret.returncode:
    log.error("git log error:\n{}".format(ret.stdout.decode()))
    sys.exit(-1)

COMMIT_ID = ret.stdout.decode().split(' ', 1)[0]
CLUSTERNAME = "{}-{}-{:.7}".format(USER, "build_ovis", COMMIT_ID)

#### spec #### -------------------------------------------------------
spec = {
    "name" : CLUSTERNAME,
    "description" : "{}'s test_agg cluster".format(USER),
    "type" : "NA",
    "templates" : { # generic template can apply to any object by "!extends"
    }, # templates
    "nodes" : [
        {
            "hostname" : "build",
            "component_id" : 0,
            "daemons" : [
                # does not need any daemon
            ],
        }
    ], # nodes

    #"image": "ovis-centos-build:slurm",
    "cap_add": [ "SYS_PTRACE", "SYS_ADMIN" ],
    "image": "ovis-centos-build",
    "env" : { "FOO": "BAR" },
    "mounts": [
        "{}:/opt/ovis:rw".format(PREFIX),
        "{}:/db:rw".format(DB),
        "{0}:{0}:rw".format(SRC),
        "{0}:{0}:rw".format(SOS_SRC),
    ] + args.mount
}

#### test definition ####

test = TADA.Test(test_suite = "LDMSD",
                 test_type = "FVT",
                 test_name = "build",
                 test_desc = "OVIS build for ldms-test",
                 test_user = args.user,
                 commit_id = COMMIT_ID,
                 tada_addr = args.tada_addr)
test.add_assertion(1, "build")

#### Start! ####
test.start()

log.info("-- Get or create the cluster --")
cluster = LDMSDCluster.get(spec["name"], create = True, spec = spec)

build = cluster.get_container("build")

build.write_file("/db/build.sh", """\
#!/bin/bash
set -x
set -e

# SOS
[[ -f /opt/ovis/bin/sos_cmd ]] || {{
    pushd {SOS_SRC}
    ./autogen.sh
    mkdir /db/sos-build
    rm -rf /db/sos-build/*
    pushd /db/sos-build
    {SOS_SRC}/configure --prefix=/opt/ovis CFLAGS='-ggdb3 -O0'
    make
    make install
    popd # sos-build
    popd # {SOS_SRC}
}}

mkdir -p /db/build
rm -rf /db/build/*
pushd {SRC}
./autogen.sh
pushd /db/build
CFLAGS=( -ggdb3 -O0 -Wall -Werror )
OPTIONS=(
        --prefix=/opt/ovis
        --with-sos=/opt/ovis
        --enable-sos
	--enable-etc
	--enable-doc
	--enable-doc-man
	--enable-zaptest
	--enable-ldms-test
	--enable-test_sampler
	--enable-munge
	--enable-store-app
	--enable-tutorial-sampler
	--enable-tutorial-store
	--enable-app-sampler
	--enable-papi
)
{SRC}/configure ${{OPTIONS[*]}} CFLAGS="${{CFLAGS[*]}}"
make
make install
""".format(**globals())
) # build.write_file /db/build.sh

log.info("-- Building --")
rc, out = build.exec_run("/bin/bash /db/build.sh > /db/build.log")

if rc == 0:
    test.assert_test(1, True, "success!")
else:
    test.assert_test(1, False, "build error, output:\n{}".format(out))

test.finish()
cluster.remove() # this destroys entire cluster
