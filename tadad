#!/usr/bin/env python3
import argparse
import logging
import socket
import json
import datetime as dt
import sys
import os
import binascii
import hashlib
import atexit
import signal
from ctypes import CDLL

from TADA import TADA_DB

libc = CDLL(None) # this is actually the main program which includes libc sym.

results = {}
db = None # the database

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def tada_server(host='0.0.0.0', port=9862):
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    log.info("Listening on udp %s:%s" % (host, port))
    s.bind((host, port))
    while True:
        (data, addr) = s.recvfrom(128*1024)
        yield addr, data

def test_start(addr, result):
    log.info("{0} - [{1}:{2:5}]".format(result['test-suite'], addr[0], addr[1]))
    timestamp = dt.datetime.fromtimestamp(int(result['timestamp']))
    log.info("    {0} {1}".format(str(timestamp), result['test-name']))
    log.info("    test-id: {0}".format(result["test-id"]))

def test_assert(addr, result):
    status = result['test-status']
    if status == 'passed':
        status = bcolors.OKGREEN + 'passed' + bcolors.ENDC
    elif status == 'failed':
        status = bcolors.FAIL + 'failed' + bcolors.ENDC
    elif status == 'skipped':
        status = bcolors.WARNING + status + bcolors.ENDC

    log.info("        {0:10} {1:4} {2}, {3}"
          .format(status,
                  result['assert-no'],
                  result['assert-desc'],
                  result['assert-cond']))

def test_finish(addr, results):
    test_id = results[0]["test-id"]
    obj = db.getTest(test_id = test_id)
    for r in results:
        msg_type = r['msg-type']
        if msg_type == 'test-start':
            test_start(addr, r)
            db_test_start(obj, r)
        elif msg_type == 'assert-status':
            test_assert(addr, r)
            db_test_assert(obj, r)
        elif msg_type == 'test-finish':
            db_test_finish(obj, r)
        else:
            log.debug("Unrecognized message type {0}".format(msg_type))

def db_test_start(obj, result):
    obj.test_suite = result["test-suite"]
    obj.test_type = result["test-type"]
    obj.test_name = result["test-name"]
    obj.test_user = result["test-user"]
    obj.commit_id = result["commit-id"]
    obj.test_desc = result.get("test-desc", obj.test_name)
    obj.test_start = int(result["timestamp"])
    obj.commit()

def db_test_assert(test_obj, result):
    assert_id = result["assert-no"]
    obj = test_obj.getAssertion(assert_id)
    obj.assert_result = result["test-status"]
    obj.assert_cond = result["assert-cond"]
    obj.assert_desc = result["assert-desc"]
    obj.commit()

def db_test_finish(obj, result):
    obj.test_finish = int(result["timestamp"])
    obj.commit()

@atexit.register
def tadad_term():
    log.info("------------ term ------------")

def tadad_SIGTERM(signum, frame):
    sys.exit(0)

signal.signal(signal.SIGTERM, tadad_SIGTERM)

if __name__ == "__main__":
    if sys.flags.interactive:
        exec(open(os.getenv("PYTHONSTARTUP", "/dev/null")).read())

    # program argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("--config", "-c", type=str,
                        help="Path to config file. If not specified, "
                        "environment variable '$TADAD_CONF' is looked up first,"
                        " then '$PWD/tadad.conf', and then '/etc/tadad.conf'. "
                        "Only the first config file found in the search order "
                        "is processed.")
    parser.add_argument("--port", "-p", help="Port number for tada server",
                        type=int, default=9862)
    parser.add_argument("--foreground", "-F", action="store_true",
                        help="Run in foreground instead of daemonizing.")
    parser.add_argument("--log", "-l", help="Log file (default: tadad.log)",
                        type=str, default="tadad.log")
    parser.add_argument("--log-level", "-L", type=str, default="INFO",
                        help="Log level. Possible values are: "
                        "DEBUG, INFO, WARNING, ERROR, and CRITICAL "
                        "(default: INFO)")
    parser.add_argument("--db-driver", type=str, default="sqlite",
                        help="The database driver (sqlite, mysql or pgsql).")
    parser.add_argument("--db-database", type=str, default="tada_db",
                        help="The name of the database.")
    parser.add_argument("--db-path", type=str, default="tada_db.sqlite",
                        help="Path to database file (for sqlite)")
    parser.add_argument("--db-host", type=str, default="localhost",
                        help="Host address of the database.")
    parser.add_argument("--db-port", type=int,
                        help="Port of the database.")
    parser.add_argument("--db-user", type=str,
                        help="Username used for database authentication.")
    parser.add_argument("--db-password", type=str,
                        help="Password used for database authentication.")
    parser.add_argument("--db-purge", action = "store_true",
                        help="Purge existing tables.")

    # argparse for processing `--config` option only
    cfg_ap = argparse.ArgumentParser(add_help = False)
    cfg_ap.add_argument("--config", "-c", type=str)

    # get the `--config` first
    cfg, cmd_args = cfg_ap.parse_known_args()
    env_cfg = os.getenv("TADAD_CONF")
    if cfg.config:
        config = cfg.config
    elif env_cfg:
        config = env_cfg
    elif os.path.exists("tadad.conf"):
        config = "tadad.conf"
    elif os.path.exists("/etc/tadad.conf"):
        config = "/etc/tadad.conf"
    else:
        config = None
    if config:
        import configparser
        cp = configparser.SafeConfigParser()
        cp.read(config)
        conf = dict(cp.items("tada"))
        parser.set_defaults(**conf)

    # parse the remaining arguments
    args = parser.parse_args()

    FORMAT_CONS = '%(asctime)s %(name)-6s %(levelname)-7s %(message)s'
    logging.basicConfig(filename=args.log, level=args.log_level, format=FORMAT_CONS)
    log = logging.getLogger("tadad")

    if not args.foreground:
        root_logger = logging.getLogger()
        lfd = root_logger.handlers[0].stream.fileno()
        libc.close(0)     # stdin
        libc.dup2(lfd, 1) # stdout to log
        libc.dup2(lfd, 2) # stderr to log
        libc.daemon(1, 1)

    log.info("============ start ============")

    db = TADA_DB(**args.__dict__)

    if args.db_purge:
        db.drop_tables()
        db.init_tables()

    for addr, data in tada_server(port=args.port):
        try:
            result = json.loads(data)
            result.setdefault("test-user", "NONE")
        except:
            log.debug("Could not parse the test result message")
            log.debug("{0}: {1}".format(addr, data))
            continue

        test_key = result.get("test-id")
        if not test_key:
            log.warn("result message does not contain `test-id`")
            continue
        msg_type = result.get('msg-type')
        if msg_type == 'test-start':
            results[test_key] = [ result ]
        elif msg_type == 'assert-status':
            results[test_key].append(result)
        elif msg_type == 'test-finish':
            results[test_key].append(result)
            test_finish(addr, results[test_key])
            del results[test_key]
        else:
            log.debug("Unrecognized message type {0}".format(msg_type))
