#!/usr/bin/env python3
#
# set_array_hang_test
# -------------------
#
# This test script covers a corner case of ldms set array (array_card>=2) where
# the aggregator updates before the sampler sample new data. In OVIS-4.3.7, the
# corner case results in update has never completed, which is a bug. This test
# is to ensure that the bug fix works and to make sure that the future code
# submission won't break this case.
#
#
# SEE ALSO:
# - python/set_array/set_array_samp.py for the Python-based sampler used in this
#   test.
# - python/set_array/set_array_agg.py for the Python-based aggregator used in
#   this test.

import os
import io
import re
import pwd
import sys
import json
import time
import atexit
import argparse
import TADA
import logging

from distutils.spawn import find_executable
from LDMS_Test import LDMSDCluster, LDMSDContainer, process_args, \
                      add_common_args, jprint, parse_ldms_ls

if __name__ != "__main__":
    raise RuntimeError("This should not be impoarted as a module.")

class Debug(object):
    pass
D = Debug()

logging.basicConfig(format = "%(asctime)s %(name)s %(levelname)s %(message)s",
                    level = logging.INFO)

log = logging.getLogger(__name__)

exec(open(os.getenv("PYTHONSTARTUP", "/dev/null")).read())

#### default values #### ---------------------------------------------
sbin_ldmsd = find_executable("ldmsd")
if sbin_ldmsd:
    default_prefix, a, b = sbin_ldmsd.rsplit('/', 2)
else:
    default_prefix = "/opt/ovis"

#### argument parsing #### -------------------------------------------
ap = argparse.ArgumentParser(description = "Test ldms_list feature")
add_common_args(ap)
args = ap.parse_args()
process_args(args)

#### config variables #### ------------------------------
USER = args.user
PREFIX = args.prefix
COMMIT_ID = args.commit_id
SRC = args.src
CLUSTERNAME = args.clustername
DB = args.data_root
LDMSD_PORT = 10000

#### spec #### -------------------------------------------------------
spec = {
    "name" : CLUSTERNAME,
    "description" : "{}'s test_agg cluster".format(USER),
    "type" : "NA",
    "templates" : { # generic template can apply to any object by "!extends"
    }, # templates
    "nodes" : [
        {
            "hostname" : "node-1",
            "component_id" : 1,
            "daemons" : [ ],
        },
    ], # nodes

    #"image": "ovis-centos-build:slurm",
    "cap_add": [ "SYS_PTRACE", "SYS_ADMIN" ],
    "image": args.image,
    "ovis_prefix": PREFIX,
    "env" : { "FOO": "BAR" },
    "mounts": [
        "{}:/db:rw".format(DB),
        "{0}:{1}:ro".format(os.path.realpath(sys.path[0]), "/tada-src"),
    ] + args.mount +
    ( ["{0}:{0}:ro".format(SRC)] if SRC else [] ),
}

#### helper functions ####

def EXPECT(val, expected, cond_id):
    if val != expected:
        msg = "\n  EXPECTING: {expected}\n  GOT: {val}".format(**vars())
        test.assert_test(cond_id, False, msg)
        raise RuntimeError(msg)
    test.assert_test(cond_id, True, "data verified")

@atexit.register
def at_exit():
    test.finish()
    log.info("-- Removing the cluster --")
    cluster.remove() # this destroys entire cluster

def pycmd(tty, cmd, retry = 3):
    """cmd must be single command w/o new line"""
    sio = io.StringIO()
    tty.write(cmd)
    # flush the echo
    while tty.read() != '':
        continue
    # ENTER to execute
    tty.write("\n")
    count = 0
    end = False
    while count < retry:
        o = tty.read(idle_timeout=0.3)
        if len(o):
            count = 0 # reset
        else:
            count += 1
        sio.write(o)
        if sio.getvalue().endswith(">>> "):
            end = True
            break
    if not end:
        raise RuntimeError("Python '{cmd}` not responding".format(**vars()))
    o = sio.getvalue()
    D.pyout = o
    # remove the echoed cmd and the prompt
    return o[ 2 : -4 ]

#### test definition ####

test = TADA.Test(test_suite = "LDMSD",
                 test_type = "FVT",
                 test_name = "set_array_hang_test",
                 test_desc = "Test set array update never completed corner case",
                 test_user = args.user,
                 commit_id = COMMIT_ID,
                 tada_addr = args.tada_addr)
test.add_assertion( 1, "start set_array_samp.py")
test.add_assertion( 2, "start set_array_agg.py")
test.add_assertion( 3, "agg update before the 1st sample")
test.add_assertion( 4, "sampling 2 times then agg update")
test.add_assertion( 5, "agg update w/o new sampling")
test.add_assertion( 6, "sampling 5 times then agg update")

test.start()

log.info("-- Get or create the cluster --")
cluster = LDMSDCluster.get(spec["name"], create = True, spec = spec)

node1 = cluster.get_container("node-1")

log.info("-- Start processes --")

# -- test.add_assertion( 1, "start set_array_samp.py")
# interactive samp
log.info("starting interactive set_array_samp.py")
isamp = node1.exec_interact(["/usr/bin/python3", "-i",
                    "/tada-src/python/set_array/set_array_samp.py"])
time.sleep(2)
osamp = isamp.read()
EXPECT(osamp, ">>> ", 1)

# -- test.add_assertion( 2, "start set_array_agg.py")
# interactive agg
iagg = node1.exec_interact(["/usr/bin/python3", "-i",
                    "/tada-src/python/set_array/set_array_agg.py"])
time.sleep(2)
oagg = iagg.read()
EXPECT(osamp, ">>> ", 2)


# -- test.add_assertion( 3, "agg update before the 1st sample")
# SEE ALSO: python/set_array/set_array_agg.py
oagg = pycmd(iagg, """\
update_set(s1);update_set(s3);t=sem.acquire();sem.release();\
jprint(update_rec);\
update_rec.clear();\
""")
osamp = pycmd(isamp, "jprint([set_dict(s1),set_dict(s3)])")
EXPECT(osamp, oagg, 3)


# -- test.add_assertion( 4, "sampling 2 times then agg update")
osamp = pycmd(isamp, """\
sample(s1,1);sample(s1,2);sample(s3,3);sample(s3,4);\
jprint(sample_rec);\
sample_rec.clear();\
""")
smp_rec = json.loads(osamp)

oagg = pycmd(iagg, """\
update_set(s1);update_set(s3);t=sem.acquire();sem.release();\
jprint(update_rec);\
update_rec.clear();\
""")
upd_rec = json.loads(oagg)
EXPECT( smp_rec[1:], upd_rec, 4 )
# NOTE sampler updated s1 twice, and updated s3 twice. s1 has set_array_card=1,
# and s3 has set_array_card=3. Hence, the agg expected to see 3 update
# completions: the 2nd sample of s1, the 1st sample of s3 and the 2nd sample of
# s3.


# -- test.add_assertion( 5, "agg update w/o new sampling")
oagg = pycmd(iagg, """\
update_set(s1);update_set(s3);t=sem.acquire();sem.release();\
jprint(update_rec);\
update_rec.clear();\
""")
upd_rec = json.loads(oagg)
EXPECT( [smp_rec[1], smp_rec[3]], upd_rec, 5 )
# NOTE: agg expect to see the 2nd sample of s1 and s3.


# -- test.add_assertion( 6, "sampling 5 times then agg update")
osamp = pycmd(isamp, """\
sample(s1,5);sample(s1,6);sample(s1,7);sample(s1,8);sample(s1,9);\
sample(s3,10);sample(s3,11);sample(s3,12);sample(s3,13);sample(s3,14);\
jprint(sample_rec);\
sample_rec.clear();\
""")
smp_rec = json.loads(osamp)

oagg = pycmd(iagg, """\
update_set(s1);update_set(s3);t=sem.acquire();sem.release();\
jprint(update_rec);\
update_rec.clear();\
""")
upd_rec = json.loads(oagg)
exp_rec = [ smp_rec[4], smp_rec[-2], smp_rec[-1] ]
EXPECT( exp_rec, upd_rec, 6 )
# NOTE: since s3 has set_array_card=3, with 5 samples, we would expect to see
#       only the last 2 samples of s3, and the last entry of s1.

# test.finish() in at_exit()
